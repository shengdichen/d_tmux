# command-aliases {{{
#   command-alias[] name=value
#   This is an array of custom aliases for commands. If an unknown command matches
#   name, it is replaced with value. For example, after: set -s command-alias[100]
#   zoom='resize-pane -Z' Using:
#
#   zoom -t:.1 Is equivalent to:
#
#   resize-pane -Z -t:.1 Note that aliases are expanded when a command is parsed
#   rather than when it is executed, so binding an alias with bind-key will bind
#   the expanded form.
#
# }}}



# default bindings {{{
#       bind-key    -T prefix       /                     copy-mode \; send-keys ?


#       bind-key    -T prefix       <                     display-menu -T
#       "#[align=centre]#{window_index}:#{window_name}" -x W -y S "Swap Left" l
#       "swap-window -t:-1" "Swap Right" r "swap-window -t:+1"
#       "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R
#       "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n
#       "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window
#       -a" "New At End" W new-window
#       bind-key    -T prefix       >                     display-menu -T
#       "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P "#{?mouse_word,Search For
#       #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt=
#       search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type
#       #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\""
#       "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer --
#       \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer --
#       \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v
#       "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D"
#       "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R
#       "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m"
#       "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

#       bind-key    -T prefix       E                     select-layout -E

#       bind-key    -T prefix       e                     source-file
#       /home/shengdi/.tmux.conf \; source-file /home/shengdi/.tmux/test.tmux \;
#       display-message "[Config overwritten]"



#       bind-key -r -T prefix       DC                    refresh-client -c
#       bind-key -r -T prefix       S-Up                  refresh-client -U 10
#       bind-key -r -T prefix       S-Down                refresh-client -D 10
#       bind-key -r -T prefix       S-Left                refresh-client -L 10
#       bind-key -r -T prefix       S-Right               refresh-client -R 10
#       bind-key    -T root         MouseDown1Pane        select-pane -t = \; send-keys
#       -M
#       bind-key    -T root         MouseDown1Status      select-window -t =
#       bind-key    -T root         MouseDown3Pane        if-shell -F -t =
#       "#{||:#{mouse_any_flag},#{pane_in_mode}}" "select-pane -t=; send-keys -M"
#       "display-menu -t= -xM -yM -T \"#[align=centre]#{pane_index} (#{pane_id})\"
#       '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r'
#       {copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"}
#       '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {send-keys -l
#       -- \"#{q:mouse_word}\"} '#{?mouse_word,Copy
#       #[underscore]#{=/9/...:mouse_word},}' 'c' {set-buffer -- \"#{q:mouse_word}\"}
#       '#{?mouse_line,Copy Line,}' 'l' {set-buffer -- \"#{q:mouse_line}\"} ''
#       'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v}
#       '' 'Swap Up' 'u' {swap-pane -U} 'Swap Down' 'd' {swap-pane -D}
#       '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane}
#       'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane
#       -m} '#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z}"
#       bind-key    -T root         MouseDown3Status      display-menu -T
#       "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y S "Swap Left" l
#       "swap-window -t:-1" "Swap Right" r "swap-window -t:+1"
#       "#{?pane_marked_set,,-}Swap Marked" s swap-window  Kill X kill-window Respawn R
#       "respawn-window -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m" Rename n
#       "command-prompt -I \"#W\" \"rename-window -- '%%'\""  "New After" w "new-window
#       -a" "New At End" W new-window
#       bind-key    -T root         MouseDown3StatusLeft  display-menu -T
#       "#[align=centre]#{session_name}" -t = -x M -y S Next n "switch-client -n"
#       Previous p "switch-client -p"  Renumber N "move-window -r" Rename n
#       "command-prompt -I \"#S\" \"rename-session -- '%%'\""  "New Session" s
#       new-session "New Window" w new-window
#       bind-key    -T root         MouseDown3StatusRight display-menu -T
#       "#[align=centre]#{client_name}" -t = -x M -y S Detach d detach-client "Detach &
#       Kill" X "detach-client -P" "Detach Others" o "detach-client -a"  Lock l
#       lock-client
#       bind-key    -T root         MouseDrag1Pane        if-shell -F -t =
#       "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys
#       -M\"" "copy-mode -M"
#       bind-key    -T root         MouseDrag1Border      resize-pane -M
#       bind-key    -T root         WheelUpPane           if-shell -F -t =
#       "#{mouse_any_flag}" "send-keys -M" "if -Ft= \"#{pane_in_mode}\" \"send-keys
#       -M\" \"copy-mode -et=\""
#       bind-key    -T root         WheelUpStatus         previous-window
#       bind-key    -T root         WheelDownStatus       next-window
#       bind-key    -T root         "M-;"                 last-pane
#       bind-key    -T root         M-o                   select-pane -t :.+
#       bind-key    -T root         M-z                   resize-pane -Z
#       bind-key    -T root         M-MouseDown3Pane      display-menu -T
#       "#[align=centre]#{pane_index} (#{pane_id})" -t = -x M -y M
#       "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode
#       -t=; send -Xt= search-backward \"#{q:mouse_word}\"" "#{?mouse_word,Type
#       #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\""
#       "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer --
#       \"#{q:mouse_word}\"" "#{?mouse_line,Copy Line,}" l "set-buffer --
#       \"#{q:mouse_line}\""  "Horizontal Split" h "split-window -h" "Vertical Split" v
#       "split-window -v"  "Swap Up" u "swap-pane -U" "Swap Down" d "swap-pane -D"
#       "#{?pane_marked_set,,-}Swap Marked" s swap-pane  Kill X kill-pane Respawn R
#       "respawn-pane -k" "#{?pane_marked,Unmark,Mark}" m "select-pane -m"
#       "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# }}}



